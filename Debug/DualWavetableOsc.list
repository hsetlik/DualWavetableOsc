
DualWavetableOsc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a98  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003c60  08003c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c80  08003c80  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c88  08003c88  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00004c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003c90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000060  08003cf0  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08003cf0  000054dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc52  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251b  00000000  00000000  00011ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00014200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1c  00000000  00000000  00014f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018588  00000000  00000000  0001594c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010449  00000000  00000000  0002ded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088691  00000000  00000000  0003e31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c69ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b2c  00000000  00000000  000c69f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ca520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c48 	.word	0x08003c48

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	08003c48 	.word	0x08003c48

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_ZN10StatusLEDs9setStatusE12DeviceStatus>:
	void setGrn(uint8_t state);
public:
	StatusLEDs();
	StatusLEDs(GPIO_TypeDef* gpio, uint16_t red, uint16_t green);
	void init(GPIO_TypeDef* gpio, uint16_t red, uint16_t green);
	void setStatus(DeviceStatus s) { status = s;  }
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	78fa      	ldrb	r2, [r7, #3]
 8000508:	755a      	strb	r2, [r3, #21]
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <_ZN10StatusLEDsC1Ev>:
 *  Created on: May 13, 2024
 *      Author: hayden
 */
#include "StatusLEDs.h"

StatusLEDs::StatusLEDs() :
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
ioType(nullptr),
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
redPin(0),
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	809a      	strh	r2, [r3, #4]
grnPin(0),
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	80da      	strh	r2, [r3, #6]
redState(0),
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	721a      	strb	r2, [r3, #8]
grnState(0),
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	725a      	strb	r2, [r3, #9]
lastRedToggle(0),
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
lastGrnToggle(0),
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
initializedFlag(0),
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	751a      	strb	r2, [r3, #20]
status(Waiting)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2201      	movs	r2, #1
 8000552:	755a      	strb	r2, [r3, #21]
{

}
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <_ZN10StatusLEDs4initEP12GPIO_TypeDeftt>:
{

}

void StatusLEDs::init(GPIO_TypeDef* gpio, uint16_t red, uint16_t green)
{
 8000562:	b480      	push	{r7}
 8000564:	b085      	sub	sp, #20
 8000566:	af00      	add	r7, sp, #0
 8000568:	60f8      	str	r0, [r7, #12]
 800056a:	60b9      	str	r1, [r7, #8]
 800056c:	4611      	mov	r1, r2
 800056e:	461a      	mov	r2, r3
 8000570:	460b      	mov	r3, r1
 8000572:	80fb      	strh	r3, [r7, #6]
 8000574:	4613      	mov	r3, r2
 8000576:	80bb      	strh	r3, [r7, #4]
	ioType = gpio;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	601a      	str	r2, [r3, #0]
	redPin = red;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	88fa      	ldrh	r2, [r7, #6]
 8000582:	809a      	strh	r2, [r3, #4]
	grnPin = green;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	88ba      	ldrh	r2, [r7, #4]
 8000588:	80da      	strh	r2, [r3, #6]
	initializedFlag = 1;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2201      	movs	r2, #1
 800058e:	751a      	strb	r2, [r3, #20]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <_ZN10StatusLEDs6setRedEh>:


void StatusLEDs::setRed(uint8_t state)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	if(redState != state){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7a1b      	ldrb	r3, [r3, #8]
 80005ac:	78fa      	ldrb	r2, [r7, #3]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d00f      	beq.n	80005d2 <_ZN10StatusLEDs6setRedEh+0x36>
		HAL_GPIO_TogglePin(ioType, redPin);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	889b      	ldrh	r3, [r3, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4610      	mov	r0, r2
 80005be:	f001 ff54 	bl	800246a <HAL_GPIO_TogglePin>
		redState = state;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	78fa      	ldrb	r2, [r7, #3]
 80005c6:	721a      	strb	r2, [r3, #8]
		lastRedToggle = HAL_GetTick();
 80005c8:	f000 fed2 	bl	8001370 <HAL_GetTick>
 80005cc:	4602      	mov	r2, r0
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	60da      	str	r2, [r3, #12]
	}
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZN10StatusLEDs6setGrnEh>:

void StatusLEDs::setGrn(uint8_t state)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	460b      	mov	r3, r1
 80005e4:	70fb      	strb	r3, [r7, #3]
	if(grnState != state){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7a5b      	ldrb	r3, [r3, #9]
 80005ea:	78fa      	ldrb	r2, [r7, #3]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d00f      	beq.n	8000610 <_ZN10StatusLEDs6setGrnEh+0x36>
		HAL_GPIO_TogglePin(ioType, grnPin);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	88db      	ldrh	r3, [r3, #6]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4610      	mov	r0, r2
 80005fc:	f001 ff35 	bl	800246a <HAL_GPIO_TogglePin>
		grnState = state;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	78fa      	ldrb	r2, [r7, #3]
 8000604:	725a      	strb	r2, [r3, #9]
		lastGrnToggle = HAL_GetTick();
 8000606:	f000 feb3 	bl	8001370 <HAL_GetTick>
 800060a:	4602      	mov	r2, r0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	611a      	str	r2, [r3, #16]
	}

}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_ZN10StatusLEDs4tickEm>:

void StatusLEDs::tick(uint32_t ms)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	switch(status){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7d5b      	ldrb	r3, [r3, #21]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d033      	beq.n	8000692 <_ZN10StatusLEDs4tickEm+0x7a>
 800062a:	2b02      	cmp	r3, #2
 800062c:	dc4b      	bgt.n	80006c6 <_ZN10StatusLEDs4tickEm+0xae>
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <_ZN10StatusLEDs4tickEm+0x20>
 8000632:	2b01      	cmp	r3, #1
 8000634:	d013      	beq.n	800065e <_ZN10StatusLEDs4tickEm+0x46>
				setGrn(newState);
			}
			break;
		}
		default:
			break;
 8000636:	e046      	b.n	80006c6 <_ZN10StatusLEDs4tickEm+0xae>
			setRed(0);
 8000638:	2100      	movs	r1, #0
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ffae 	bl	800059c <_ZN10StatusLEDs6setRedEh>
			if(ms < 30000)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000646:	4293      	cmp	r3, r2
 8000648:	d804      	bhi.n	8000654 <_ZN10StatusLEDs4tickEm+0x3c>
				setGrn(1);
 800064a:	2101      	movs	r1, #1
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ffc4 	bl	80005da <_ZN10StatusLEDs6setGrnEh>
			break;
 8000652:	e03d      	b.n	80006d0 <_ZN10StatusLEDs4tickEm+0xb8>
				setGrn(0);
 8000654:	2100      	movs	r1, #0
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffbf 	bl	80005da <_ZN10StatusLEDs6setGrnEh>
			break;
 800065c:	e038      	b.n	80006d0 <_ZN10StatusLEDs4tickEm+0xb8>
			setRed(1);
 800065e:	2101      	movs	r1, #1
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff9b 	bl	800059c <_ZN10StatusLEDs6setRedEh>
			if(ms - lastGrnToggle >= SLOW_BLINK_MS){
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	f240 3251 	movw	r2, #849	@ 0x351
 8000672:	4293      	cmp	r3, r2
 8000674:	d929      	bls.n	80006ca <_ZN10StatusLEDs4tickEm+0xb2>
				uint8_t newState = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
				if(grnState)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7a5b      	ldrb	r3, [r3, #9]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <_ZN10StatusLEDs4tickEm+0x6e>
					newState = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
				setGrn(newState);
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ffa5 	bl	80005da <_ZN10StatusLEDs6setGrnEh>
			break;
 8000690:	e01b      	b.n	80006ca <_ZN10StatusLEDs4tickEm+0xb2>
			if(ms - lastRedToggle >= FAST_BLINK_MS){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800069e:	d316      	bcc.n	80006ce <_ZN10StatusLEDs4tickEm+0xb6>
				uint8_t newState = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73bb      	strb	r3, [r7, #14]
				if(redState)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7a1b      	ldrb	r3, [r3, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <_ZN10StatusLEDs4tickEm+0x98>
					newState = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73bb      	strb	r3, [r7, #14]
				setRed(newState);
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	4619      	mov	r1, r3
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff ff71 	bl	800059c <_ZN10StatusLEDs6setRedEh>
				setGrn(newState);
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff ff8b 	bl	80005da <_ZN10StatusLEDs6setGrnEh>
			break;
 80006c4:	e003      	b.n	80006ce <_ZN10StatusLEDs4tickEm+0xb6>
			break;
 80006c6:	bf00      	nop
 80006c8:	e002      	b.n	80006d0 <_ZN10StatusLEDs4tickEm+0xb8>
			break;
 80006ca:	bf00      	nop
 80006cc:	e000      	b.n	80006d0 <_ZN10StatusLEDs4tickEm+0xb8>
			break;
 80006ce:	bf00      	nop
	}
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <create_status_led>:

//------------------------------------------------------------

status_led_t create_status_led()
{
 80006d8:	b598      	push	{r3, r4, r7, lr}
 80006da:	af00      	add	r7, sp, #0
	return new StatusLEDs();
 80006dc:	2018      	movs	r0, #24
 80006de:	f003 f954 	bl	800398a <_Znwj>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461c      	mov	r4, r3
 80006e6:	4620      	mov	r0, r4
 80006e8:	f7ff ff15 	bl	8000516 <_ZN10StatusLEDsC1Ev>
 80006ec:	4623      	mov	r3, r4
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	bd98      	pop	{r3, r4, r7, pc}

080006f2 <init_status_led>:
	StatusLEDs* typedPtr = static_cast<StatusLEDs*>(led);
	delete typedPtr;
}

void init_status_led(status_led_t led, GPIO_TypeDef* gpio, uint16_t red, uint16_t green)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	4611      	mov	r1, r2
 80006fe:	461a      	mov	r2, r3
 8000700:	460b      	mov	r3, r1
 8000702:	80fb      	strh	r3, [r7, #6]
 8000704:	4613      	mov	r3, r2
 8000706:	80bb      	strh	r3, [r7, #4]
	StatusLEDs* typedPtr = static_cast<StatusLEDs*>(led);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	617b      	str	r3, [r7, #20]
	typedPtr->init(gpio, red, green);
 800070c:	88bb      	ldrh	r3, [r7, #4]
 800070e:	88fa      	ldrh	r2, [r7, #6]
 8000710:	68b9      	ldr	r1, [r7, #8]
 8000712:	6978      	ldr	r0, [r7, #20]
 8000714:	f7ff ff25 	bl	8000562 <_ZN10StatusLEDs4initEP12GPIO_TypeDeftt>
}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <tick_status_led>:

void tick_status_led(status_led_t led, uint32_t ms)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
	StatusLEDs* typedPtr = static_cast<StatusLEDs*>(led);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]
	typedPtr->tick(ms);
 800072e:	6839      	ldr	r1, [r7, #0]
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ff71 	bl	8000618 <_ZN10StatusLEDs4tickEm>
}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <status_normal>:

void status_normal(status_led_t led)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b084      	sub	sp, #16
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	StatusLEDs* typedPtr = static_cast<StatusLEDs*>(led);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60fb      	str	r3, [r7, #12]
	typedPtr->setStatus(DeviceStatus::Normal);
 800074a:	2100      	movs	r1, #0
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f7ff fed3 	bl	80004f8 <_ZN10StatusLEDs9setStatusE12DeviceStatus>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <status_error>:
	StatusLEDs* typedPtr = static_cast<StatusLEDs*>(led);
	typedPtr->setStatus(DeviceStatus::Waiting);
}

void status_error(status_led_t led)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	StatusLEDs* typedPtr = static_cast<StatusLEDs*>(led);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60fb      	str	r3, [r7, #12]
	typedPtr->setStatus(DeviceStatus::Error);
 8000766:	2102      	movs	r1, #2
 8000768:	68f8      	ldr	r0, [r7, #12]
 800076a:	f7ff fec5 	bl	80004f8 <_ZN10StatusLEDs9setStatusE12DeviceStatus>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <HAL_I2S_TxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// I2S callbacks
// transmit is half complete
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	outBufPtr = &dacData[0];
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000784:	601a      	str	r2, [r3, #0]
	audioDataReadyFlag = 1;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	20000000 	.word	0x20000000
 800079c:	20000278 	.word	0x20000278
 80007a0:	20000378 	.word	0x20000378

080007a4 <HAL_I2S_TxCpltCallback>:


// transmit is complete
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	outBufPtr = &dacData[BUFFER_SIZE / 2];
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <HAL_I2S_TxCpltCallback+0x20>)
 80007ae:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <HAL_I2S_TxCpltCallback+0x24>)
 80007b0:	601a      	str	r2, [r3, #0]
	audioDataReadyFlag = 1;
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_I2S_TxCpltCallback+0x28>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	20000000 	.word	0x20000000
 80007c8:	200002f8 	.word	0x200002f8
 80007cc:	20000378 	.word	0x20000378

080007d0 <processAudioBuffer>:


// renders the next chunk of the audio buffers to give to the DMA
void processAudioBuffer()
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
	static float leftOut, rightOut;
	for(uint8_t i = 0; i < (BUFFER_SIZE / 2) - 1; i += 2){
 80007d6:	2300      	movs	r3, #0
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e023      	b.n	8000824 <processAudioBuffer+0x54>
		///TODO: logic to determine the value of the samples goes here
		dacData[i] = (int16_t)(leftOut * FLOAT_TO_INT16);
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <processAudioBuffer+0x6c>)
 80007de:	edd3 7a00 	vldr	s15, [r3]
 80007e2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000840 <processAudioBuffer+0x70>
 80007e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007f0:	ee17 2a90 	vmov	r2, s15
 80007f4:	b211      	sxth	r1, r2
 80007f6:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <processAudioBuffer+0x74>)
 80007f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dacData[i + 1] = (int16_t)(rightOut * FLOAT_TO_INT16);
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <processAudioBuffer+0x78>)
 80007fe:	edd3 7a00 	vldr	s15, [r3]
 8000802:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000840 <processAudioBuffer+0x70>
 8000806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3301      	adds	r3, #1
 800080e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000812:	ee17 2a90 	vmov	r2, s15
 8000816:	b211      	sxth	r1, r2
 8000818:	4a0a      	ldr	r2, [pc, #40]	@ (8000844 <processAudioBuffer+0x74>)
 800081a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < (BUFFER_SIZE / 2) - 1; i += 2){
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	3302      	adds	r3, #2
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b3e      	cmp	r3, #62	@ 0x3e
 8000828:	d9d8      	bls.n	80007dc <processAudioBuffer+0xc>
	}
	audioDataReadyFlag = 0;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <processAudioBuffer+0x7c>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]

}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20000380 	.word	0x20000380
 8000840:	47000000 	.word	0x47000000
 8000844:	20000278 	.word	0x20000278
 8000848:	20000384 	.word	0x20000384
 800084c:	20000378 	.word	0x20000378

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fd25 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f843 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f000 f9e1 	bl	8000c24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000862:	f000 f9b7 	bl	8000bd4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000866:	f000 f8a7 	bl	80009b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800086a:	f000 f921 	bl	8000ab0 <MX_I2C1_Init>
  MX_I2S1_Init();
 800086e:	f000 f94d 	bl	8000b0c <MX_I2S1_Init>
  MX_SPI2_Init();
 8000872:	f000 f979 	bl	8000b68 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // start the  I2S DMA stream
  HAL_StatusTypeDef result = HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)dacData, BUFFER_SIZE);
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	4916      	ldr	r1, [pc, #88]	@ (80008d4 <main+0x84>)
 800087a:	4817      	ldr	r0, [pc, #92]	@ (80008d8 <main+0x88>)
 800087c:	f002 f828 	bl	80028d0 <HAL_I2S_Transmit_DMA>
 8000880:	4603      	mov	r3, r0
 8000882:	72fb      	strb	r3, [r7, #11]
  if(result != HAL_OK){
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d004      	beq.n	8000894 <main+0x44>
	  status_error(leds);
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <main+0x8c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff63 	bl	800075a <status_error>
  }
  status_normal(leds);
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <main+0x8c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff50 	bl	800073e <status_normal>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t now = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  uint32_t prev = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  if(audioDataReadyFlag){
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <main+0x90>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <main+0x62>
		  processAudioBuffer();
 80008ae:	f7ff ff8f 	bl	80007d0 <processAudioBuffer>
	  }
	  now = HAL_GetTick();
 80008b2:	f000 fd5d 	bl	8001370 <HAL_GetTick>
 80008b6:	6078      	str	r0, [r7, #4]
	  if(now - prev > 5)
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b05      	cmp	r3, #5
 80008c0:	d9f1      	bls.n	80008a6 <main+0x56>
	  {
		  prev = now;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	60fb      	str	r3, [r7, #12]
		  tick_status_led(leds, now);
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <main+0x8c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff27 	bl	8000720 <tick_status_led>
	  if(audioDataReadyFlag){
 80008d2:	e7e8      	b.n	80008a6 <main+0x56>
 80008d4:	20000278 	.word	0x20000278
 80008d8:	20000178 	.word	0x20000178
 80008dc:	2000037c 	.word	0x2000037c
 80008e0:	20000378 	.word	0x20000378

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	@ 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2234      	movs	r2, #52	@ 0x34
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 f920 	bl	8003b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <SystemClock_Config+0xcc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000910:	4a27      	ldr	r2, [pc, #156]	@ (80009b0 <SystemClock_Config+0xcc>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	@ 0x40
 8000918:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <SystemClock_Config+0xcc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <SystemClock_Config+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a21      	ldr	r2, [pc, #132]	@ (80009b4 <SystemClock_Config+0xd0>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <SystemClock_Config+0xd0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000944:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000948:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000958:	2364      	movs	r3, #100	@ 0x64
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fcff 	bl	8003370 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000978:	f000 f9ce 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2103      	movs	r1, #3
 8000998:	4618      	mov	r0, r3
 800099a:	f002 f991 	bl	8002cc0 <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009a4:	f000 f9b8 	bl	8000d18 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3750      	adds	r7, #80	@ 0x50
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009cc:	4a36      	ldr	r2, [pc, #216]	@ (8000aa8 <MX_ADC1_Init+0xf0>)
 80009ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009d0:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d8:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009de:	4b31      	ldr	r3, [pc, #196]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e4:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ea:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009f2:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 80009fa:	4a2c      	ldr	r2, [pc, #176]	@ (8000aac <MX_ADC1_Init+0xf4>)
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009fe:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a04:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a0a:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a18:	4822      	ldr	r0, [pc, #136]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a1a:	f000 fcb5 	bl	8001388 <HAL_ADC_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a24:	f000 f978 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	481a      	ldr	r0, [pc, #104]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a3a:	f000 fce9 	bl	8001410 <HAL_ADC_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a44:	f000 f968 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a50:	463b      	mov	r3, r7
 8000a52:	4619      	mov	r1, r3
 8000a54:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a56:	f000 fcdb 	bl	8001410 <HAL_ADC_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a60:	f000 f95a 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a72:	f000 fccd 	bl	8001410 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a7c:	f000 f94c 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a80:	2303      	movs	r3, #3
 8000a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_ADC1_Init+0xec>)
 8000a8e:	f000 fcbf 	bl	8001410 <HAL_ADC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a98:	f000 f93e 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000007c 	.word	0x2000007c
 8000aa8:	40012000 	.word	0x40012000
 8000aac:	0f000001 	.word	0x0f000001

08000ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	@ (8000b04 <MX_I2C1_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <MX_I2C1_Init+0x58>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_I2C1_Init+0x50>)
 8000aee:	f001 fcd7 	bl	80024a0 <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 f90e 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000124 	.word	0x20000124
 8000b04:	40005400 	.word	0x40005400
 8000b08:	000186a0 	.word	0x000186a0

08000b0c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000b10:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b12:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <MX_I2S1_Init+0x58>)
 8000b14:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b1c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b30:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b34:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000b38:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLLR;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_I2S1_Init+0x54>)
 8000b4e:	f001 fdeb 	bl	8002728 <HAL_I2S_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 8000b58:	f000 f8de 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000178 	.word	0x20000178
 8000b64:	40013000 	.word	0x40013000

08000b68 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b6e:	4a18      	ldr	r2, [pc, #96]	@ (8000bd0 <MX_SPI2_Init+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b72:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 15;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_SPI2_Init+0x64>)
 8000bba:	f002 fe5d 	bl	8003878 <HAL_SPI_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bc4:	f000 f8a8 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000220 	.word	0x20000220
 8000bd0:	40003800 	.word	0x40003800

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_DMA_Init+0x4c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <MX_DMA_Init+0x4c>)
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <MX_DMA_Init+0x4c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2038      	movs	r0, #56	@ 0x38
 8000bfc:	f000 ff01 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c00:	2038      	movs	r0, #56	@ 0x38
 8000c02:	f000 ff1a 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	203a      	movs	r0, #58	@ 0x3a
 8000c0c:	f000 fef9 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c10:	203a      	movs	r0, #58	@ 0x3a
 8000c12:	f000 ff12 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b32      	ldr	r3, [pc, #200]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2106      	movs	r1, #6
 8000c92:	481e      	ldr	r0, [pc, #120]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000c94:	f001 fbd0 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GRN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GRN_Pin|LED_RED_Pin;
 8000c98:	2306      	movs	r3, #6
 8000c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4817      	ldr	r0, [pc, #92]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000cb0:	f001 fa4e 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin ENC2_B_Pin ENC1_B_Pin MODE_BTN_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|ENC2_B_Pin|ENC1_B_Pin|MODE_BTN_Pin;
 8000cb4:	f241 1330 	movw	r3, #4400	@ 0x1130
 8000cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4810      	ldr	r0, [pc, #64]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000cca:	f001 fa41 	bl	8002150 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH_BTN_Pin ENC2_L_Pin ENC2_R_Pin ENC1_L_Pin
                           ENC1_R_Pin */
  GPIO_InitStruct.Pin = CH_BTN_Pin|ENC2_L_Pin|ENC2_R_Pin|ENC1_L_Pin
 8000cce:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000cd2:	60fb      	str	r3, [r7, #12]
                          |ENC1_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <MX_GPIO_Init+0xec>)
 8000ce4:	f001 fa34 	bl	8002150 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // initialize the LEDs
  leds = create_status_led();
 8000ce8:	f7ff fcf6 	bl	80006d8 <create_status_led>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a09      	ldr	r2, [pc, #36]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000cf0:	6013      	str	r3, [r2, #0]
  init_status_led(leds, GPIOB, LED_RED_Pin, LED_GRN_Pin);
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	4904      	ldr	r1, [pc, #16]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000cfc:	f7ff fcf9 	bl	80006f2 <init_status_led>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020000 	.word	0x40020000
 8000d14:	2000037c 	.word	0x2000037c

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <Error_Handler+0x8>

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a08      	ldr	r2, [pc, #32]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2f      	ldr	r2, [pc, #188]	@ (8000e50 <HAL_ADC_MspInit+0xdc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d157      	bne.n	8000e46 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a26      	ldr	r2, [pc, #152]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <HAL_ADC_MspInit+0xe0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CV2_Pin|MOD2_Pin|MOD1_Pin|CV1_Pin;
 8000dce:	230f      	movs	r3, #15
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	481d      	ldr	r0, [pc, #116]	@ (8000e58 <HAL_ADC_MspInit+0xe4>)
 8000de2:	f001 f9b5 	bl	8002150 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000de8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e60 <HAL_ADC_MspInit+0xec>)
 8000dea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e2a:	480c      	ldr	r0, [pc, #48]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e2c:	f000 fe20 	bl	8001a70 <HAL_DMA_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e36:	f7ff ff6f 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_ADC_MspInit+0xe8>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012000 	.word	0x40012000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	200000c4 	.word	0x200000c4
 8000e60:	40026410 	.word	0x40026410

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <HAL_I2C_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_I2C_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <HAL_I2C_MspInit+0x88>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_I2C_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23c0      	movs	r3, #192	@ 0xc0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea6:	2312      	movs	r3, #18
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <HAL_I2C_MspInit+0x8c>)
 8000ebe:	f001 f947 	bl	8002150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <HAL_I2C_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <HAL_I2C_MspInit+0x88>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_I2C_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b090      	sub	sp, #64	@ 0x40
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a49      	ldr	r2, [pc, #292]	@ (8001048 <HAL_I2S_MspInit+0x154>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	f040 808b 	bne.w	8001040 <HAL_I2S_MspInit+0x14c>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2SClockSelection = RCC_I2SAPBCLKSOURCE_PLLR;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 f8cc 	bl	80030d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000f42:	f7ff fee9 	bl	8000d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b40      	ldr	r3, [pc, #256]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b39      	ldr	r3, [pc, #228]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a38      	ldr	r2, [pc, #224]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b32      	ldr	r3, [pc, #200]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a31      	ldr	r2, [pc, #196]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800104c <HAL_I2S_MspInit+0x158>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PB10     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000f9a:	23b0      	movs	r3, #176	@ 0xb0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000faa:	2305      	movs	r3, #5
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4826      	ldr	r0, [pc, #152]	@ (8001050 <HAL_I2S_MspInit+0x15c>)
 8000fb6:	f001 f8cb 	bl	8002150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI1;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481f      	ldr	r0, [pc, #124]	@ (8001054 <HAL_I2S_MspInit+0x160>)
 8000fd8:	f001 f8ba 	bl	8002150 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8000fde:	4a1f      	ldr	r2, [pc, #124]	@ (800105c <HAL_I2S_MspInit+0x168>)
 8000fe0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8000fe4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fe8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8000fec:	2240      	movs	r2, #64	@ 0x40
 8000fee:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8000ff8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ffc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8001000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001004:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8001008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8001010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001014:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8001018:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800101c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8001026:	f000 fd23 	bl	8001a70 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8001030:	f7ff fe72 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
 800103a:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <HAL_I2S_MspInit+0x164>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3740      	adds	r7, #64	@ 0x40
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013000 	.word	0x40013000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	200001c0 	.word	0x200001c0
 800105c:	40026440 	.word	0x40026440

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	@ (80010e4 <HAL_SPI_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12c      	bne.n	80010dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6413      	str	r3, [r2, #64]	@ 0x40
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_SPI_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010cc:	2305      	movs	r3, #5
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <HAL_SPI_MspInit+0x8c>)
 80010d8:	f001 f83a 	bl	8002150 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40003800 	.word	0x40003800
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f8ff 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <DMA2_Stream0_IRQHandler+0x10>)
 8001156:	f000 fd91 	bl	8001c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000c4 	.word	0x200000c4

08001164 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <DMA2_Stream2_IRQHandler+0x10>)
 800116a:	f000 fd87 	bl	8001c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001c0 	.word	0x200001c0

08001178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return 1;
 800117c:	2301      	movs	r3, #1
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_kill>:

int _kill(int pid, int sig)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001192:	f002 fd2d 	bl	8003bf0 <__errno>
 8001196:	4603      	mov	r3, r0
 8001198:	2216      	movs	r2, #22
 800119a:	601a      	str	r2, [r3, #0]
  return -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_exit>:

void _exit (int status)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ffe7 	bl	8001188 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011ba:	bf00      	nop
 80011bc:	e7fd      	b.n	80011ba <_exit+0x12>
	...

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	@ (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f002 fcfe 	bl	8003bf0 <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20008000 	.word	0x20008000
 8001220:	00000400 	.word	0x00000400
 8001224:	20000388 	.word	0x20000388
 8001228:	200004e0 	.word	0x200004e0

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001288 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001254:	f7ff ffea 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f002 fcbd 	bl	8003bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fae5 	bl	8000850 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001288:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001294:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 8001298:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800129c:	200004dc 	.word	0x200004dc

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 fb8d 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fd24 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fba5 	bl	8001a56 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001324:	f000 fb6d 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000004 	.word	0x20000004
 8001340:	2000000c 	.word	0x2000000c
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2000000c 	.word	0x2000000c
 800136c:	2000038c 	.word	0x2000038c

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000038c 	.word	0x2000038c

08001388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e033      	b.n	8001406 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fce4 	bl	8000d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f93a 	bl	8001654 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x1c>
 8001428:	2302      	movs	r3, #2
 800142a:	e105      	b.n	8001638 <HAL_ADC_ConfigChannel+0x228>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b09      	cmp	r3, #9
 800143a:	d925      	bls.n	8001488 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68d9      	ldr	r1, [r3, #12]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	3b1e      	subs	r3, #30
 8001452:	2207      	movs	r2, #7
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43da      	mvns	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	400a      	ands	r2, r1
 8001460:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68d9      	ldr	r1, [r3, #12]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	4603      	mov	r3, r0
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4403      	add	r3, r0
 800147a:	3b1e      	subs	r3, #30
 800147c:	409a      	lsls	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	e022      	b.n	80014ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6919      	ldr	r1, [r3, #16]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	2207      	movs	r2, #7
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	400a      	ands	r2, r1
 80014aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6919      	ldr	r1, [r3, #16]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4403      	add	r3, r0
 80014c4:	409a      	lsls	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d824      	bhi.n	8001520 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b05      	subs	r3, #5
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	400a      	ands	r2, r1
 80014f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b05      	subs	r3, #5
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
 800151e:	e04c      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d824      	bhi.n	8001572 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	3b23      	subs	r3, #35	@ 0x23
 800153a:	221f      	movs	r2, #31
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43da      	mvns	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	400a      	ands	r2, r1
 8001548:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b23      	subs	r3, #35	@ 0x23
 8001564:	fa00 f203 	lsl.w	r2, r0, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001570:	e023      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b41      	subs	r3, #65	@ 0x41
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b41      	subs	r3, #65	@ 0x41
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ba:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <HAL_ADC_ConfigChannel+0x234>)
 80015bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_ADC_ConfigChannel+0x238>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d109      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1cc>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	@ (8001648 <HAL_ADC_ConfigChannel+0x238>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d123      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d003      	beq.n	80015f6 <HAL_ADC_ConfigChannel+0x1e6>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b11      	cmp	r3, #17
 80015f4:	d11b      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d111      	bne.n	800162e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_ADC_ConfigChannel+0x23c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a10      	ldr	r2, [pc, #64]	@ (8001650 <HAL_ADC_ConfigChannel+0x240>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9a      	lsrs	r2, r3, #18
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001620:	e002      	b.n	8001628 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3b01      	subs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f9      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012300 	.word	0x40012300
 8001648:	40012000 	.word	0x40012000
 800164c:	20000004 	.word	0x20000004
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800165c:	4b79      	ldr	r3, [pc, #484]	@ (8001844 <ADC_Init+0x1f0>)
 800165e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	431a      	orrs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	4a58      	ldr	r2, [pc, #352]	@ (8001848 <ADC_Init+0x1f4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800171c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e00f      	b.n	8001752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0202 	bic.w	r2, r2, #2
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	005a      	lsls	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800178e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800179e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	3b01      	subs	r3, #1
 80017ac:	035a      	lsls	r2, r3, #13
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e007      	b.n	80017c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	051a      	lsls	r2, r3, #20
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800180a:	025a      	lsls	r2, r3, #9
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	029a      	lsls	r2, r3, #10
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40012300 	.word	0x40012300
 8001848:	0f000001 	.word	0x0f000001

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	@ (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	@ (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	@ (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff fc78 	bl	8001370 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e099      	b.n	8001bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aac:	e00f      	b.n	8001ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aae:	f7ff fc5f 	bl	8001370 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d908      	bls.n	8001ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e078      	b.n	8001bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e8      	bne.n	8001aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <HAL_DMA_Init+0x158>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d107      	bne.n	8001b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	4313      	orrs	r3, r2
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f023 0307 	bic.w	r3, r3, #7
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d117      	bne.n	8001b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fa6f 	bl	8002058 <DMA_CheckFifoParam>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2240      	movs	r2, #64	@ 0x40
 8001b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e016      	b.n	8001bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fa26 	bl	8001fec <DMA_CalcBaseAndBitshift>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	223f      	movs	r2, #63	@ 0x3f
 8001baa:	409a      	lsls	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	f010803f 	.word	0xf010803f

08001bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_DMA_Start_IT+0x26>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e040      	b.n	8001c74 <HAL_DMA_Start_IT+0xa8>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d12f      	bne.n	8001c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f9b8 	bl	8001f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c24:	223f      	movs	r2, #63	@ 0x3f
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0216 	orr.w	r2, r2, #22
 8001c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0208 	orr.w	r2, r2, #8
 8001c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e005      	b.n	8001c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c88:	4b8e      	ldr	r3, [pc, #568]	@ (8001ec4 <HAL_DMA_IRQHandler+0x248>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec8 <HAL_DMA_IRQHandler+0x24c>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0204 	bic.w	r2, r2, #4
 8001cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cec:	2201      	movs	r2, #1
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d22:	2204      	movs	r2, #4
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	2204      	movs	r2, #4
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d58:	2210      	movs	r2, #16
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d043      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03c      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	2210      	movs	r2, #16
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d018      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d024      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
 8001daa:	e01f      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
 8001dbc:	e016      	b.n	8001dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0208 	bic.w	r2, r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	2220      	movs	r2, #32
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 808f 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 8087 	beq.w	8001f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e12:	2220      	movs	r2, #32
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d136      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0216 	bic.w	r2, r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d103      	bne.n	8001e56 <HAL_DMA_IRQHandler+0x1da>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0208 	bic.w	r2, r2, #8
 8001e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6a:	223f      	movs	r2, #63	@ 0x3f
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d07e      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
        }
        return;
 8001e92:	e079      	b.n	8001f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01d      	beq.n	8001ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10d      	bne.n	8001ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d031      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e02c      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
 8001ec2:	bf00      	nop
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e01e      	b.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10f      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0210 	bic.w	r2, r2, #16
 8001efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d032      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d022      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2205      	movs	r2, #5
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d307      	bcc.n	8001f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f2      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x2cc>
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
 8001f86:	e000      	b.n	8001f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f88:	bf00      	nop
    }
  }
}
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b40      	cmp	r3, #64	@ 0x40
 8001fbc:	d108      	bne.n	8001fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fce:	e007      	b.n	8001fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	3b10      	subs	r3, #16
 8001ffc:	4a14      	ldr	r2, [pc, #80]	@ (8002050 <DMA_CalcBaseAndBitshift+0x64>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002006:	4a13      	ldr	r2, [pc, #76]	@ (8002054 <DMA_CalcBaseAndBitshift+0x68>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d909      	bls.n	800202e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	@ 0x58
 800202c:	e007      	b.n	800203e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	aaaaaaab 	.word	0xaaaaaaab
 8002054:	08003c78 	.word	0x08003c78

08002058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d856      	bhi.n	8002126 <DMA_CheckFifoParam+0xce>
 8002078:	a201      	add	r2, pc, #4	@ (adr r2, 8002080 <DMA_CheckFifoParam+0x28>)
 800207a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207e:	bf00      	nop
 8002080:	08002091 	.word	0x08002091
 8002084:	080020a3 	.word	0x080020a3
 8002088:	08002091 	.word	0x08002091
 800208c:	08002127 	.word	0x08002127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d046      	beq.n	800212a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a0:	e043      	b.n	800212a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020aa:	d140      	bne.n	800212e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b0:	e03d      	b.n	800212e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ba:	d121      	bne.n	8002100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d837      	bhi.n	8002132 <DMA_CheckFifoParam+0xda>
 80020c2:	a201      	add	r2, pc, #4	@ (adr r2, 80020c8 <DMA_CheckFifoParam+0x70>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020df 	.word	0x080020df
 80020d0:	080020d9 	.word	0x080020d9
 80020d4:	080020f1 	.word	0x080020f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e030      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d025      	beq.n	8002136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ee:	e022      	b.n	8002136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020f8:	d11f      	bne.n	800213a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020fe:	e01c      	b.n	800213a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d903      	bls.n	800210e <DMA_CheckFifoParam+0xb6>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d003      	beq.n	8002114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800210c:	e018      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      break;
 8002112:	e015      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      break;
 8002124:	e00b      	b.n	800213e <DMA_CheckFifoParam+0xe6>
      break;
 8002126:	bf00      	nop
 8002128:	e00a      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212a:	bf00      	nop
 800212c:	e008      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800212e:	bf00      	nop
 8002130:	e006      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002132:	bf00      	nop
 8002134:	e004      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 8002136:	bf00      	nop
 8002138:	e002      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;   
 800213a:	bf00      	nop
 800213c:	e000      	b.n	8002140 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
    }
  } 
  
  return status; 
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e14d      	b.n	8002408 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	f040 813c 	bne.w	8002402 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d005      	beq.n	80021a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b03      	cmp	r3, #3
 800220e:	d017      	beq.n	8002240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d123      	bne.n	8002294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	08da      	lsrs	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3208      	adds	r2, #8
 800228e:	69b9      	ldr	r1, [r7, #24]
 8002290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0203 	and.w	r2, r3, #3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8096 	beq.w	8002402 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b51      	ldr	r3, [pc, #324]	@ (8002420 <HAL_GPIO_Init+0x2d0>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a50      	ldr	r2, [pc, #320]	@ (8002420 <HAL_GPIO_Init+0x2d0>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <HAL_GPIO_Init+0x2d0>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002424 <HAL_GPIO_Init+0x2d4>)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	220f      	movs	r2, #15
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a43      	ldr	r2, [pc, #268]	@ (8002428 <HAL_GPIO_Init+0x2d8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1ea>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a42      	ldr	r2, [pc, #264]	@ (800242c <HAL_GPIO_Init+0x2dc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1e6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a41      	ldr	r2, [pc, #260]	@ (8002430 <HAL_GPIO_Init+0x2e0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1e2>
 800232e:	2302      	movs	r3, #2
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x1ec>
 8002332:	2307      	movs	r3, #7
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x1ec>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x1ec>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	@ (8002424 <HAL_GPIO_Init+0x2d4>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a2d      	ldr	r2, [pc, #180]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b2b      	ldr	r3, [pc, #172]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a22      	ldr	r2, [pc, #136]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a18      	ldr	r2, [pc, #96]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f aeae 	bls.w	800216c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43d9      	mvns	r1, r3
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	400b      	ands	r3, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e12b      	b.n	800270a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fccc 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	@ 0x24
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002504:	f000 fdd2 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a81      	ldr	r2, [pc, #516]	@ (8002714 <HAL_I2C_Init+0x274>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d807      	bhi.n	8002524 <HAL_I2C_Init+0x84>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a80      	ldr	r2, [pc, #512]	@ (8002718 <HAL_I2C_Init+0x278>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e006      	b.n	8002532 <HAL_I2C_Init+0x92>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a7d      	ldr	r2, [pc, #500]	@ (800271c <HAL_I2C_Init+0x27c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	bf94      	ite	ls
 800252c:	2301      	movls	r3, #1
 800252e:	2300      	movhi	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e7      	b.n	800270a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a78      	ldr	r2, [pc, #480]	@ (8002720 <HAL_I2C_Init+0x280>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a6a      	ldr	r2, [pc, #424]	@ (8002714 <HAL_I2C_Init+0x274>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d802      	bhi.n	8002574 <HAL_I2C_Init+0xd4>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	e009      	b.n	8002588 <HAL_I2C_Init+0xe8>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a69      	ldr	r2, [pc, #420]	@ (8002724 <HAL_I2C_Init+0x284>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	3301      	adds	r3, #1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800259a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	495c      	ldr	r1, [pc, #368]	@ (8002714 <HAL_I2C_Init+0x274>)
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d819      	bhi.n	80025dc <HAL_I2C_Init+0x13c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e59      	subs	r1, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025bc:	400b      	ands	r3, r1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_I2C_Init+0x138>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e59      	subs	r1, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	e051      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025d8:	2304      	movs	r3, #4
 80025da:	e04f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d111      	bne.n	8002608 <HAL_I2C_Init+0x168>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e012      	b.n	800262e <HAL_I2C_Init+0x18e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x196>
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_I2C_Init+0x1dc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <HAL_I2C_Init+0x1bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e58      	subs	r0, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800265a:	e00f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	0099      	lsls	r1, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6911      	ldr	r1, [r2, #16]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	000186a0 	.word	0x000186a0
 8002718:	001e847f 	.word	0x001e847f
 800271c:	003d08ff 	.word	0x003d08ff
 8002720:	431bde83 	.word	0x431bde83
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0c2      	b.n	80028c0 <HAL_I2S_Init+0x198>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a5d      	ldr	r2, [pc, #372]	@ (80028c8 <HAL_I2S_Init+0x1a0>)
 8002752:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe fbcd 	bl	8000ef4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002770:	f023 030f 	bic.w	r3, r3, #15
 8002774:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2202      	movs	r2, #2
 800277c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d060      	beq.n	8002848 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800278e:	2310      	movs	r3, #16
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e001      	b.n	8002798 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b20      	cmp	r3, #32
 800279e:	d802      	bhi.n	80027a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f000 fd70 	bl	800328c <HAL_RCCEx_GetPeriphCLKFreq>
 80027ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027b6:	d125      	bne.n	8002804 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	461a      	mov	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	3305      	adds	r3, #5
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e01f      	b.n	8002822 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	3305      	adds	r3, #5
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	e00e      	b.n	8002822 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fbb2 f2f3 	udiv	r2, r2, r3
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	3305      	adds	r3, #5
 8002820:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a29      	ldr	r2, [pc, #164]	@ (80028cc <HAL_I2S_Init+0x1a4>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	08db      	lsrs	r3, r3, #3
 800282c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002848:	2302      	movs	r3, #2
 800284a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d902      	bls.n	800285c <HAL_I2S_Init+0x134>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	2bff      	cmp	r3, #255	@ 0xff
 800285a:	d907      	bls.n	800286c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	f043 0210 	orr.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e029      	b.n	80028c0 <HAL_I2S_Init+0x198>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	ea42 0103 	orr.w	r1, r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	430a      	orrs	r2, r1
 800287e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800288a:	f023 030f 	bic.w	r3, r3, #15
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6851      	ldr	r1, [r2, #4]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6892      	ldr	r2, [r2, #8]
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68d2      	ldr	r2, [r2, #12]
 800289c:	4311      	orrs	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6992      	ldr	r2, [r2, #24]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ae:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	08002bad 	.word	0x08002bad
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_I2S_Transmit_DMA+0x1a>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e08e      	b.n	8002a0c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_I2S_Transmit_DMA+0x2e>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e086      	b.n	8002a0c <HAL_I2S_Transmit_DMA+0x13c>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d005      	beq.n	800291e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	e076      	b.n	8002a0c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d002      	beq.n	800294a <HAL_I2S_Transmit_DMA+0x7a>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10a      	bne.n	8002960 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800295e:	e005      	b.n	800296c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	4a28      	ldr	r2, [pc, #160]	@ (8002a14 <HAL_I2S_Transmit_DMA+0x144>)
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002978:	4a27      	ldr	r2, [pc, #156]	@ (8002a18 <HAL_I2S_Transmit_DMA+0x148>)
 800297a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	4a26      	ldr	r2, [pc, #152]	@ (8002a1c <HAL_I2S_Transmit_DMA+0x14c>)
 8002982:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800298c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002994:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800299c:	f7ff f916 	bl	8001bcc <HAL_DMA_Start_IT>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00f      	beq.n	80029c6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f043 0208 	orr.w	r2, r3, #8
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d107      	bne.n	80029e4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029e2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0202 	orr.w	r2, r2, #2
 8002a00:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	08002a8b 	.word	0x08002a8b
 8002a18:	08002a49 	.word	0x08002a49
 8002a1c:	08002aa7 	.word	0x08002aa7

08002a20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0202 	bic.w	r2, r2, #2
 8002a6c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7fd fe91 	bl	80007a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7fd fe6d 	bl	8000778 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0203 	bic.w	r2, r2, #3
 8002ac2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	f043 0208 	orr.w	r2, r3, #8
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff ffa5 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	881a      	ldrh	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	1c9a      	adds	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10e      	bne.n	8002b46 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7fd fe2f 	bl	80007a4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	b292      	uxth	r2, r2
 8002b62:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff3e 	bl	8002a20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d13a      	bne.n	8002c3e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d109      	bne.n	8002be6 <I2S_IRQHandler+0x3a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bdc:	2b40      	cmp	r3, #64	@ 0x40
 8002bde:	d102      	bne.n	8002be6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ffb4 	bl	8002b4e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bec:	2b40      	cmp	r3, #64	@ 0x40
 8002bee:	d126      	bne.n	8002c3e <I2S_IRQHandler+0x92>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d11f      	bne.n	8002c3e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c0c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c30:	f043 0202 	orr.w	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fefb 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d136      	bne.n	8002cb8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d109      	bne.n	8002c68 <I2S_IRQHandler+0xbc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5e:	2b80      	cmp	r3, #128	@ 0x80
 8002c60:	d102      	bne.n	8002c68 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff45 	bl	8002af2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d122      	bne.n	8002cb8 <I2S_IRQHandler+0x10c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d11b      	bne.n	8002cb8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c8e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	f043 0204 	orr.w	r2, r3, #4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff febe 	bl	8002a34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0cc      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b68      	ldr	r3, [pc, #416]	@ (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d90c      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b65      	ldr	r3, [pc, #404]	@ (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b63      	ldr	r3, [pc, #396]	@ (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b8      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d14:	4b59      	ldr	r3, [pc, #356]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a58      	ldr	r2, [pc, #352]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d2c:	4b53      	ldr	r3, [pc, #332]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a52      	ldr	r2, [pc, #328]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d38:	4b50      	ldr	r3, [pc, #320]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	494d      	ldr	r1, [pc, #308]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d044      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d119      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e06f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e067      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b37      	ldr	r3, [pc, #220]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4934      	ldr	r1, [pc, #208]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fade 	bl	8001370 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe fada 	bl	8001370 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e04f      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d20c      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b22      	ldr	r3, [pc, #136]	@ (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b20      	ldr	r3, [pc, #128]	@ (8002e78 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e032      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4916      	ldr	r1, [pc, #88]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e32:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	490e      	ldr	r1, [pc, #56]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e46:	f000 f821 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	490a      	ldr	r1, [pc, #40]	@ (8002e80 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	5ccb      	ldrb	r3, [r1, r3]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	4a09      	ldr	r2, [pc, #36]	@ (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fa3e 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	08003c60 	.word	0x08003c60
 8002e84:	20000004 	.word	0x20000004
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b094      	sub	sp, #80	@ 0x50
 8002e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e98:	2300      	movs	r3, #0
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea4:	4b79      	ldr	r3, [pc, #484]	@ (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d00d      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x40>
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	f200 80e1 	bhi.w	8003078 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ebe:	e0db      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b73      	ldr	r3, [pc, #460]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002ec4:	e0db      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ec6:	4b72      	ldr	r3, [pc, #456]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eca:	e0d8      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ed4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	@ (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d063      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002efa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002efe:	4622      	mov	r2, r4
 8002f00:	462b      	mov	r3, r5
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4621      	mov	r1, r4
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	6139      	str	r1, [r7, #16]
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f30:	4659      	mov	r1, fp
 8002f32:	018b      	lsls	r3, r1, #6
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	018a      	lsls	r2, r1, #6
 8002f3e:	4651      	mov	r1, sl
 8002f40:	ebb2 0801 	subs.w	r8, r2, r1
 8002f44:	4659      	mov	r1, fp
 8002f46:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5e:	4690      	mov	r8, r2
 8002f60:	4699      	mov	r9, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	eb18 0303 	adds.w	r3, r8, r3
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	462b      	mov	r3, r5
 8002f6c:	eb49 0303 	adc.w	r3, r9, r3
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f7e:	4629      	mov	r1, r5
 8002f80:	028b      	lsls	r3, r1, #10
 8002f82:	4621      	mov	r1, r4
 8002f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f88:	4621      	mov	r1, r4
 8002f8a:	028a      	lsls	r2, r1, #10
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f92:	2200      	movs	r2, #0
 8002f94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f9c:	f7fd f934 	bl	8000208 <__aeabi_uldivmod>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fa8:	e058      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b38      	ldr	r3, [pc, #224]	@ (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	f04f 0000 	mov.w	r0, #0
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	0159      	lsls	r1, r3, #5
 8002fd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd6:	0150      	lsls	r0, r2, #5
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4641      	mov	r1, r8
 8002fde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ff4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ff8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ffc:	ebb2 040a 	subs.w	r4, r2, sl
 8003000:	eb63 050b 	sbc.w	r5, r3, fp
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	00eb      	lsls	r3, r5, #3
 800300e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003012:	00e2      	lsls	r2, r4, #3
 8003014:	4614      	mov	r4, r2
 8003016:	461d      	mov	r5, r3
 8003018:	4643      	mov	r3, r8
 800301a:	18e3      	adds	r3, r4, r3
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	464b      	mov	r3, r9
 8003020:	eb45 0303 	adc.w	r3, r5, r3
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003046:	2200      	movs	r2, #0
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	61fa      	str	r2, [r7, #28]
 800304c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003050:	f7fd f8da 	bl	8000208 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_RCC_GetSysClockFreq+0x200>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	3301      	adds	r3, #1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800306c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800306e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003076:	e002      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x204>)
 800307a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800307c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003080:	4618      	mov	r0, r3
 8003082:	3750      	adds	r7, #80	@ 0x50
 8003084:	46bd      	mov	sp, r7
 8003086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	00f42400 	.word	0x00f42400

08003094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000004 	.word	0x20000004

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b0:	f7ff fff0 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	@ (80030d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	08003c70 	.word	0x08003c70

080030d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8083 	beq.w	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b61      	ldr	r3, [pc, #388]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	4a60      	ldr	r2, [pc, #384]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	@ 0x40
 8003102:	4b5e      	ldr	r3, [pc, #376]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800310e:	4b5c      	ldr	r3, [pc, #368]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5b      	ldr	r2, [pc, #364]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800311a:	f7fe f929 	bl	8001370 <HAL_GetTick>
 800311e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003122:	f7fe f925 	bl	8001370 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e09f      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003134:	4b52      	ldr	r3, [pc, #328]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003140:	4b4e      	ldr	r3, [pc, #312]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003148:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02f      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	429a      	cmp	r2, r3
 800315c:	d028      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315e:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003166:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003168:	4b46      	ldr	r3, [pc, #280]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800316e:	4b45      	ldr	r3, [pc, #276]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003174:	4a41      	ldr	r2, [pc, #260]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800317a:	4b40      	ldr	r3, [pc, #256]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d114      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe f8f3 	bl	8001370 <HAL_GetTick>
 800318a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe f8ef 	bl	8001370 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d901      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e067      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a4:	4b35      	ldr	r3, [pc, #212]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ee      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031bc:	d10d      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031be:	4b2f      	ldr	r3, [pc, #188]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80031ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d2:	492a      	ldr	r1, [pc, #168]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
 80031d8:	e005      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80031da:	4b28      	ldr	r3, [pc, #160]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4a27      	ldr	r2, [pc, #156]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031e0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	4b25      	ldr	r3, [pc, #148]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f2:	4922      	ldr	r1, [pc, #136]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7d1a      	ldrb	r2, [r3, #20]
 8003208:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800320a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003218:	4b18      	ldr	r3, [pc, #96]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	4915      	ldr	r1, [pc, #84]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800323a:	4b10      	ldr	r3, [pc, #64]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003240:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	490c      	ldr	r1, [pc, #48]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 800325c:	4b07      	ldr	r3, [pc, #28]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800325e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003262:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4904      	ldr	r1, [pc, #16]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000
 8003284:	42470e40 	.word	0x42470e40
 8003288:	424711e0 	.word	0x424711e0

0800328c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d153      	bne.n	8003352 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80032aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032b0:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032bc:	d038      	beq.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032c4:	d841      	bhi.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d2:	d13a      	bne.n	800334a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPBCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80032d4:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80032d6:	617b      	str	r3, [r7, #20]
          break;
 80032d8:	e03a      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPBCLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032e6:	d108      	bne.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f0:	4a1e      	ldr	r2, [pc, #120]	@ (800336c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	e007      	b.n	800330a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80032fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003302:	4a1a      	ldr	r2, [pc, #104]	@ (800336c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800330a:	4b16      	ldr	r3, [pc, #88]	@ (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800331c:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0f1b      	lsrs	r3, r3, #28
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
          break;
 800332e:	e00f      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPBCLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003330:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800333c:	d102      	bne.n	8003344 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          {
            frequency = HSE_VALUE;
 800333e:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003340:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003342:	e005      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
            frequency = HSI_VALUE;
 8003344:	4b09      	ldr	r3, [pc, #36]	@ (800336c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003346:	617b      	str	r3, [r7, #20]
          break;
 8003348:	e002      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
          break;
 800334e:	bf00      	nop
        }
      }
      break;
 8003350:	e000      	b.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
    }
  default:
    {
       break;
 8003352:	bf00      	nop
    }
  }
  return frequency;
 8003354:	697b      	ldr	r3, [r7, #20]
}
 8003356:	4618      	mov	r0, r3
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	00bb8000 	.word	0x00bb8000
 800336c:	00f42400 	.word	0x00f42400

08003370 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e273      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d075      	beq.n	800347a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800338e:	4b88      	ldr	r3, [pc, #544]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b04      	cmp	r3, #4
 8003398:	d00c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b85      	ldr	r3, [pc, #532]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d112      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b82      	ldr	r3, [pc, #520]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	4b7e      	ldr	r3, [pc, #504]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05b      	beq.n	8003478 <HAL_RCC_OscConfig+0x108>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d157      	bne.n	8003478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e24e      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d4:	d106      	bne.n	80033e4 <HAL_RCC_OscConfig+0x74>
 80033d6:	4b76      	ldr	r3, [pc, #472]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0x98>
 80033ee:	4b70      	ldr	r3, [pc, #448]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6f      	ldr	r2, [pc, #444]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6d      	ldr	r3, [pc, #436]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6c      	ldr	r2, [pc, #432]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xb0>
 8003408:	4b69      	ldr	r3, [pc, #420]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a68      	ldr	r2, [pc, #416]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b66      	ldr	r3, [pc, #408]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a65      	ldr	r2, [pc, #404]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd ffa2 	bl	8001370 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd ff9e 	bl	8001370 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e213      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xc0>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd ff8e 	bl	8001370 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd ff8a 	bl	8001370 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e1ff      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346a:	4b51      	ldr	r3, [pc, #324]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0xe8>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d063      	beq.n	800354e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003486:	4b4a      	ldr	r3, [pc, #296]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b47      	ldr	r3, [pc, #284]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b44      	ldr	r3, [pc, #272]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e1d3      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c2:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4937      	ldr	r1, [pc, #220]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d6:	e03a      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d020      	beq.n	8003522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e0:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCC_OscConfig+0x244>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fd ff43 	bl	8001370 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fd ff3f 	bl	8001370 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1b4      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b2b      	ldr	r3, [pc, #172]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b28      	ldr	r3, [pc, #160]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4925      	ldr	r1, [pc, #148]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 800351c:	4313      	orrs	r3, r2
 800351e:	600b      	str	r3, [r1, #0]
 8003520:	e015      	b.n	800354e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <HAL_RCC_OscConfig+0x244>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd ff22 	bl	8001370 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003530:	f7fd ff1e 	bl	8001370 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e193      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003542:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d036      	beq.n	80035c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fd ff02 	bl	8001370 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003570:	f7fd fefe 	bl	8001370 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e173      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003582:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_OscConfig+0x240>)
 8003584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x200>
 800358e:	e01b      	b.n	80035c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_RCC_OscConfig+0x248>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fd feeb 	bl	8001370 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359c:	e00e      	b.n	80035bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359e:	f7fd fee7 	bl	8001370 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d907      	bls.n	80035bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e15c      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	42470000 	.word	0x42470000
 80035b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	4b8a      	ldr	r3, [pc, #552]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ea      	bne.n	800359e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8097 	beq.w	8003704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035da:	4b83      	ldr	r3, [pc, #524]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	4b7f      	ldr	r3, [pc, #508]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	4a7e      	ldr	r2, [pc, #504]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f6:	4b7c      	ldr	r3, [pc, #496]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b79      	ldr	r3, [pc, #484]	@ (80037ec <HAL_RCC_OscConfig+0x47c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b76      	ldr	r3, [pc, #472]	@ (80037ec <HAL_RCC_OscConfig+0x47c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a75      	ldr	r2, [pc, #468]	@ (80037ec <HAL_RCC_OscConfig+0x47c>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fd fea7 	bl	8001370 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fd fea3 	bl	8001370 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e118      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b6c      	ldr	r3, [pc, #432]	@ (80037ec <HAL_RCC_OscConfig+0x47c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x2ea>
 800364c:	4b66      	ldr	r3, [pc, #408]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003650:	4a65      	ldr	r2, [pc, #404]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	@ 0x70
 8003658:	e01c      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b05      	cmp	r3, #5
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x30c>
 8003662:	4b61      	ldr	r3, [pc, #388]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a60      	ldr	r2, [pc, #384]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	@ 0x70
 800366e:	4b5e      	ldr	r3, [pc, #376]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	4a5d      	ldr	r2, [pc, #372]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6713      	str	r3, [r2, #112]	@ 0x70
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0x324>
 800367c:	4b5a      	ldr	r3, [pc, #360]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a59      	ldr	r2, [pc, #356]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
 8003688:	4b57      	ldr	r3, [pc, #348]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368c:	4a56      	ldr	r2, [pc, #344]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 800368e:	f023 0304 	bic.w	r3, r3, #4
 8003692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd fe68 	bl	8001370 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd fe64 	bl	8001370 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0d7      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	4b4b      	ldr	r3, [pc, #300]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0ee      	beq.n	80036a4 <HAL_RCC_OscConfig+0x334>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fd fe52 	bl	8001370 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d0:	f7fd fe4e 	bl	8001370 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e0c1      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e6:	4b40      	ldr	r3, [pc, #256]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ee      	bne.n	80036d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d105      	bne.n	8003704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f8:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4a3a      	ldr	r2, [pc, #232]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80036fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80ad 	beq.w	8003868 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800370e:	4b36      	ldr	r3, [pc, #216]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d060      	beq.n	80037dc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d145      	bne.n	80037ae <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b33      	ldr	r3, [pc, #204]	@ (80037f0 <HAL_RCC_OscConfig+0x480>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fd fe22 	bl	8001370 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fd fe1e 	bl	8001370 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e093      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003742:	4b29      	ldr	r3, [pc, #164]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375c:	019b      	lsls	r3, r3, #6
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	3b01      	subs	r3, #1
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	071b      	lsls	r3, r3, #28
 800377a:	491b      	ldr	r1, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <HAL_RCC_OscConfig+0x480>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fdf3 	bl	8001370 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fd fdef 	bl	8001370 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e064      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x41e>
 80037ac:	e05c      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_RCC_OscConfig+0x480>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd fddc 	bl	8001370 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fd fdd8 	bl	8001370 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e04d      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <HAL_RCC_OscConfig+0x478>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x44c>
 80037da:	e045      	b.n	8003868 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e040      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40007000 	.word	0x40007000
 80037f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <HAL_RCC_OscConfig+0x504>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d030      	beq.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d129      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d122      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800382a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	4293      	cmp	r3, r2
 800382e:	d119      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d10f      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800

08003878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07b      	b.n	8003982 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d108      	bne.n	80038a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800389a:	d009      	beq.n	80038b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
 80038a2:	e005      	b.n	80038b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fbc8 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003934:	ea42 0103 	orr.w	r1, r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	f003 0104 	and.w	r1, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	f003 0210 	and.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003970:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <_Znwj>:
 800398a:	2801      	cmp	r0, #1
 800398c:	bf38      	it	cc
 800398e:	2001      	movcc	r0, #1
 8003990:	b510      	push	{r4, lr}
 8003992:	4604      	mov	r4, r0
 8003994:	4620      	mov	r0, r4
 8003996:	f000 f819 	bl	80039cc <malloc>
 800399a:	b100      	cbz	r0, 800399e <_Znwj+0x14>
 800399c:	bd10      	pop	{r4, pc}
 800399e:	f000 f805 	bl	80039ac <_ZSt15get_new_handlerv>
 80039a2:	b908      	cbnz	r0, 80039a8 <_Znwj+0x1e>
 80039a4:	f000 f80a 	bl	80039bc <abort>
 80039a8:	4780      	blx	r0
 80039aa:	e7f3      	b.n	8003994 <_Znwj+0xa>

080039ac <_ZSt15get_new_handlerv>:
 80039ac:	4b02      	ldr	r3, [pc, #8]	@ (80039b8 <_ZSt15get_new_handlerv+0xc>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	f3bf 8f5b 	dmb	ish
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000390 	.word	0x20000390

080039bc <abort>:
 80039bc:	b508      	push	{r3, lr}
 80039be:	2006      	movs	r0, #6
 80039c0:	f000 f8ea 	bl	8003b98 <raise>
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7fd fbef 	bl	80011a8 <_exit>
	...

080039cc <malloc>:
 80039cc:	4b02      	ldr	r3, [pc, #8]	@ (80039d8 <malloc+0xc>)
 80039ce:	4601      	mov	r1, r0
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	f000 b825 	b.w	8003a20 <_malloc_r>
 80039d6:	bf00      	nop
 80039d8:	20000010 	.word	0x20000010

080039dc <sbrk_aligned>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	4e0f      	ldr	r6, [pc, #60]	@ (8003a1c <sbrk_aligned+0x40>)
 80039e0:	460c      	mov	r4, r1
 80039e2:	6831      	ldr	r1, [r6, #0]
 80039e4:	4605      	mov	r5, r0
 80039e6:	b911      	cbnz	r1, 80039ee <sbrk_aligned+0x12>
 80039e8:	f000 f8f2 	bl	8003bd0 <_sbrk_r>
 80039ec:	6030      	str	r0, [r6, #0]
 80039ee:	4621      	mov	r1, r4
 80039f0:	4628      	mov	r0, r5
 80039f2:	f000 f8ed 	bl	8003bd0 <_sbrk_r>
 80039f6:	1c43      	adds	r3, r0, #1
 80039f8:	d103      	bne.n	8003a02 <sbrk_aligned+0x26>
 80039fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80039fe:	4620      	mov	r0, r4
 8003a00:	bd70      	pop	{r4, r5, r6, pc}
 8003a02:	1cc4      	adds	r4, r0, #3
 8003a04:	f024 0403 	bic.w	r4, r4, #3
 8003a08:	42a0      	cmp	r0, r4
 8003a0a:	d0f8      	beq.n	80039fe <sbrk_aligned+0x22>
 8003a0c:	1a21      	subs	r1, r4, r0
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f000 f8de 	bl	8003bd0 <_sbrk_r>
 8003a14:	3001      	adds	r0, #1
 8003a16:	d1f2      	bne.n	80039fe <sbrk_aligned+0x22>
 8003a18:	e7ef      	b.n	80039fa <sbrk_aligned+0x1e>
 8003a1a:	bf00      	nop
 8003a1c:	20000394 	.word	0x20000394

08003a20 <_malloc_r>:
 8003a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a24:	1ccd      	adds	r5, r1, #3
 8003a26:	f025 0503 	bic.w	r5, r5, #3
 8003a2a:	3508      	adds	r5, #8
 8003a2c:	2d0c      	cmp	r5, #12
 8003a2e:	bf38      	it	cc
 8003a30:	250c      	movcc	r5, #12
 8003a32:	2d00      	cmp	r5, #0
 8003a34:	4606      	mov	r6, r0
 8003a36:	db01      	blt.n	8003a3c <_malloc_r+0x1c>
 8003a38:	42a9      	cmp	r1, r5
 8003a3a:	d904      	bls.n	8003a46 <_malloc_r+0x26>
 8003a3c:	230c      	movs	r3, #12
 8003a3e:	6033      	str	r3, [r6, #0]
 8003a40:	2000      	movs	r0, #0
 8003a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b1c <_malloc_r+0xfc>
 8003a4a:	f000 f869 	bl	8003b20 <__malloc_lock>
 8003a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a52:	461c      	mov	r4, r3
 8003a54:	bb44      	cbnz	r4, 8003aa8 <_malloc_r+0x88>
 8003a56:	4629      	mov	r1, r5
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f7ff ffbf 	bl	80039dc <sbrk_aligned>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	4604      	mov	r4, r0
 8003a62:	d158      	bne.n	8003b16 <_malloc_r+0xf6>
 8003a64:	f8d8 4000 	ldr.w	r4, [r8]
 8003a68:	4627      	mov	r7, r4
 8003a6a:	2f00      	cmp	r7, #0
 8003a6c:	d143      	bne.n	8003af6 <_malloc_r+0xd6>
 8003a6e:	2c00      	cmp	r4, #0
 8003a70:	d04b      	beq.n	8003b0a <_malloc_r+0xea>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	4639      	mov	r1, r7
 8003a76:	4630      	mov	r0, r6
 8003a78:	eb04 0903 	add.w	r9, r4, r3
 8003a7c:	f000 f8a8 	bl	8003bd0 <_sbrk_r>
 8003a80:	4581      	cmp	r9, r0
 8003a82:	d142      	bne.n	8003b0a <_malloc_r+0xea>
 8003a84:	6821      	ldr	r1, [r4, #0]
 8003a86:	1a6d      	subs	r5, r5, r1
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f7ff ffa6 	bl	80039dc <sbrk_aligned>
 8003a90:	3001      	adds	r0, #1
 8003a92:	d03a      	beq.n	8003b0a <_malloc_r+0xea>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	442b      	add	r3, r5
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	bb62      	cbnz	r2, 8003afc <_malloc_r+0xdc>
 8003aa2:	f8c8 7000 	str.w	r7, [r8]
 8003aa6:	e00f      	b.n	8003ac8 <_malloc_r+0xa8>
 8003aa8:	6822      	ldr	r2, [r4, #0]
 8003aaa:	1b52      	subs	r2, r2, r5
 8003aac:	d420      	bmi.n	8003af0 <_malloc_r+0xd0>
 8003aae:	2a0b      	cmp	r2, #11
 8003ab0:	d917      	bls.n	8003ae2 <_malloc_r+0xc2>
 8003ab2:	1961      	adds	r1, r4, r5
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	6025      	str	r5, [r4, #0]
 8003ab8:	bf18      	it	ne
 8003aba:	6059      	strne	r1, [r3, #4]
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	bf08      	it	eq
 8003ac0:	f8c8 1000 	streq.w	r1, [r8]
 8003ac4:	5162      	str	r2, [r4, r5]
 8003ac6:	604b      	str	r3, [r1, #4]
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f000 f82f 	bl	8003b2c <__malloc_unlock>
 8003ace:	f104 000b 	add.w	r0, r4, #11
 8003ad2:	1d23      	adds	r3, r4, #4
 8003ad4:	f020 0007 	bic.w	r0, r0, #7
 8003ad8:	1ac2      	subs	r2, r0, r3
 8003ada:	bf1c      	itt	ne
 8003adc:	1a1b      	subne	r3, r3, r0
 8003ade:	50a3      	strne	r3, [r4, r2]
 8003ae0:	e7af      	b.n	8003a42 <_malloc_r+0x22>
 8003ae2:	6862      	ldr	r2, [r4, #4]
 8003ae4:	42a3      	cmp	r3, r4
 8003ae6:	bf0c      	ite	eq
 8003ae8:	f8c8 2000 	streq.w	r2, [r8]
 8003aec:	605a      	strne	r2, [r3, #4]
 8003aee:	e7eb      	b.n	8003ac8 <_malloc_r+0xa8>
 8003af0:	4623      	mov	r3, r4
 8003af2:	6864      	ldr	r4, [r4, #4]
 8003af4:	e7ae      	b.n	8003a54 <_malloc_r+0x34>
 8003af6:	463c      	mov	r4, r7
 8003af8:	687f      	ldr	r7, [r7, #4]
 8003afa:	e7b6      	b.n	8003a6a <_malloc_r+0x4a>
 8003afc:	461a      	mov	r2, r3
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	42a3      	cmp	r3, r4
 8003b02:	d1fb      	bne.n	8003afc <_malloc_r+0xdc>
 8003b04:	2300      	movs	r3, #0
 8003b06:	6053      	str	r3, [r2, #4]
 8003b08:	e7de      	b.n	8003ac8 <_malloc_r+0xa8>
 8003b0a:	230c      	movs	r3, #12
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f000 f80c 	bl	8003b2c <__malloc_unlock>
 8003b14:	e794      	b.n	8003a40 <_malloc_r+0x20>
 8003b16:	6005      	str	r5, [r0, #0]
 8003b18:	e7d6      	b.n	8003ac8 <_malloc_r+0xa8>
 8003b1a:	bf00      	nop
 8003b1c:	20000398 	.word	0x20000398

08003b20 <__malloc_lock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	@ (8003b28 <__malloc_lock+0x8>)
 8003b22:	f000 b88f 	b.w	8003c44 <__retarget_lock_acquire_recursive>
 8003b26:	bf00      	nop
 8003b28:	200004d4 	.word	0x200004d4

08003b2c <__malloc_unlock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	@ (8003b34 <__malloc_unlock+0x8>)
 8003b2e:	f000 b88a 	b.w	8003c46 <__retarget_lock_release_recursive>
 8003b32:	bf00      	nop
 8003b34:	200004d4 	.word	0x200004d4

08003b38 <memset>:
 8003b38:	4402      	add	r2, r0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <memset+0xa>
 8003b40:	4770      	bx	lr
 8003b42:	f803 1b01 	strb.w	r1, [r3], #1
 8003b46:	e7f9      	b.n	8003b3c <memset+0x4>

08003b48 <_raise_r>:
 8003b48:	291f      	cmp	r1, #31
 8003b4a:	b538      	push	{r3, r4, r5, lr}
 8003b4c:	4605      	mov	r5, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	d904      	bls.n	8003b5c <_raise_r+0x14>
 8003b52:	2316      	movs	r3, #22
 8003b54:	6003      	str	r3, [r0, #0]
 8003b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003b5e:	b112      	cbz	r2, 8003b66 <_raise_r+0x1e>
 8003b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b64:	b94b      	cbnz	r3, 8003b7a <_raise_r+0x32>
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 f830 	bl	8003bcc <_getpid_r>
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	4601      	mov	r1, r0
 8003b70:	4628      	mov	r0, r5
 8003b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b76:	f000 b817 	b.w	8003ba8 <_kill_r>
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d00a      	beq.n	8003b94 <_raise_r+0x4c>
 8003b7e:	1c59      	adds	r1, r3, #1
 8003b80:	d103      	bne.n	8003b8a <_raise_r+0x42>
 8003b82:	2316      	movs	r3, #22
 8003b84:	6003      	str	r3, [r0, #0]
 8003b86:	2001      	movs	r0, #1
 8003b88:	e7e7      	b.n	8003b5a <_raise_r+0x12>
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003b90:	4620      	mov	r0, r4
 8003b92:	4798      	blx	r3
 8003b94:	2000      	movs	r0, #0
 8003b96:	e7e0      	b.n	8003b5a <_raise_r+0x12>

08003b98 <raise>:
 8003b98:	4b02      	ldr	r3, [pc, #8]	@ (8003ba4 <raise+0xc>)
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	f7ff bfd3 	b.w	8003b48 <_raise_r>
 8003ba2:	bf00      	nop
 8003ba4:	20000010 	.word	0x20000010

08003ba8 <_kill_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4d07      	ldr	r5, [pc, #28]	@ (8003bc8 <_kill_r+0x20>)
 8003bac:	2300      	movs	r3, #0
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	f7fd fae7 	bl	8001188 <_kill>
 8003bba:	1c43      	adds	r3, r0, #1
 8003bbc:	d102      	bne.n	8003bc4 <_kill_r+0x1c>
 8003bbe:	682b      	ldr	r3, [r5, #0]
 8003bc0:	b103      	cbz	r3, 8003bc4 <_kill_r+0x1c>
 8003bc2:	6023      	str	r3, [r4, #0]
 8003bc4:	bd38      	pop	{r3, r4, r5, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200004d8 	.word	0x200004d8

08003bcc <_getpid_r>:
 8003bcc:	f7fd bad4 	b.w	8001178 <_getpid>

08003bd0 <_sbrk_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4d06      	ldr	r5, [pc, #24]	@ (8003bec <_sbrk_r+0x1c>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	f7fd faf0 	bl	80011c0 <_sbrk>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_sbrk_r+0x1a>
 8003be4:	682b      	ldr	r3, [r5, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_sbrk_r+0x1a>
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	200004d8 	.word	0x200004d8

08003bf0 <__errno>:
 8003bf0:	4b01      	ldr	r3, [pc, #4]	@ (8003bf8 <__errno+0x8>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000010 	.word	0x20000010

08003bfc <__libc_init_array>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8003c34 <__libc_init_array+0x38>)
 8003c00:	4c0d      	ldr	r4, [pc, #52]	@ (8003c38 <__libc_init_array+0x3c>)
 8003c02:	1b64      	subs	r4, r4, r5
 8003c04:	10a4      	asrs	r4, r4, #2
 8003c06:	2600      	movs	r6, #0
 8003c08:	42a6      	cmp	r6, r4
 8003c0a:	d109      	bne.n	8003c20 <__libc_init_array+0x24>
 8003c0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c3c <__libc_init_array+0x40>)
 8003c0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003c40 <__libc_init_array+0x44>)
 8003c10:	f000 f81a 	bl	8003c48 <_init>
 8003c14:	1b64      	subs	r4, r4, r5
 8003c16:	10a4      	asrs	r4, r4, #2
 8003c18:	2600      	movs	r6, #0
 8003c1a:	42a6      	cmp	r6, r4
 8003c1c:	d105      	bne.n	8003c2a <__libc_init_array+0x2e>
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
 8003c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c24:	4798      	blx	r3
 8003c26:	3601      	adds	r6, #1
 8003c28:	e7ee      	b.n	8003c08 <__libc_init_array+0xc>
 8003c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2e:	4798      	blx	r3
 8003c30:	3601      	adds	r6, #1
 8003c32:	e7f2      	b.n	8003c1a <__libc_init_array+0x1e>
 8003c34:	08003c88 	.word	0x08003c88
 8003c38:	08003c88 	.word	0x08003c88
 8003c3c:	08003c88 	.word	0x08003c88
 8003c40:	08003c8c 	.word	0x08003c8c

08003c44 <__retarget_lock_acquire_recursive>:
 8003c44:	4770      	bx	lr

08003c46 <__retarget_lock_release_recursive>:
 8003c46:	4770      	bx	lr

08003c48 <_init>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr

08003c54 <_fini>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr
